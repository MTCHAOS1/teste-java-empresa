package br.com.empresa.service;

import br.com.empresa.model.Empresa;
import br.com.empresa.model.Funcionario;
import br.com.empresa.io.FuncionarioInputReader;

import java.util.Comparator;
import java.util.List;

/**
 * Classe respons√°vel por gerenciar opera√ß√µes relacionadas aos funcion√°rios de uma empresa.
 * Centraliza a l√≥gica de neg√≥cios: adicionar, remover, buscar, listar e calcular m√©dia salarial.
 */
public class FuncionarioService {

    private final Empresa empresa;                       // Inst√¢ncia da empresa
    private final FuncionarioInputReader inputReader = new FuncionarioInputReader(); // L√™ dados do usu√°rio

    /**
     * Construtor da classe, recebe a empresa que ser√° gerenciada.
     *
     * @param empresa Empresa cujos funcion√°rios ser√£o gerenciados
     */
    public FuncionarioService(Empresa empresa) {
        this.empresa = empresa;
    }

    /**
     * Adiciona um novo funcion√°rio √† empresa.
     * Valida se o ID informado j√° existe antes de adicionar.
     */
    public void adicionarFuncionario() {
        Funcionario f = inputReader.lerFuncionario(); // L√™ os dados do funcion√°rio

        // Verifica se j√° existe funcion√°rio com o mesmo ID
        if (empresa.buscarFuncionarioPorId(f.getId()) != null) {
            System.out.println("‚ö† J√° existe um funcion√°rio com o ID " + f.getId() + "!");
            return;
        }

        // Adiciona funcion√°rio
        empresa.adicionarFuncionario(f);
        System.out.println("‚úÖ Funcion√°rio adicionado com sucesso!");
    }

    /**
     * Lista todos os funcion√°rios da empresa, ordenando primeiro por sal√°rio (decrescente)
     * e, em caso de empate, pelo nome (alfab√©tico).
     */
    public void listarFuncionarios() {
        List<Funcionario> lista = empresa.getFuncionarios();

        if (lista.isEmpty()) {
            System.out.println("‚ö† Nenhum funcion√°rio cadastrado.");
            return;
        }

        // Ordena√ß√£o: sal√°rio decrescente, depois nome crescente
        lista.sort(
                Comparator.comparingDouble(Funcionario::getSalario).reversed()
                        .thenComparing(Funcionario::getNome)
        );

        System.out.println("üìã Funcion√°rios ordenados por sal√°rio e nome:");
        lista.forEach(System.out::println);
    }

    /**
     * Remove um funcion√°rio da empresa pelo ID informado pelo usu√°rio.
     */
    public void removerFuncionario() {
        int id = inputReader.lerId(); // L√™ ID do funcion√°rio

        if (empresa.removerFuncionarioPorId(id)) {
            System.out.println("‚úÖ Funcion√°rio removido com sucesso!");
        } else {
            System.out.println("‚ö† Funcion√°rio n√£o encontrado!");
        }
    }

    /**
     * Busca e exibe um funcion√°rio pelo ID informado pelo usu√°rio.
     */
    public void buscarFuncionarioPorId() {
        int id = inputReader.lerId(); // L√™ ID do funcion√°rio

        Funcionario funcionario = empresa.buscarFuncionarioPorId(id);

        if (funcionario != null) {
            System.out.println("üîç Funcion√°rio encontrado:");
            System.out.println(funcionario);
        } else {
            System.out.println("‚ö† Funcion√°rio n√£o encontrado!");
        }
    }

    /**
     * Calcula e exibe a m√©dia salarial dos funcion√°rios da empresa.
     */
    public void imprimirMediaSalarial() {
        List<Funcionario> lista = empresa.getFuncionarios();

        if (lista.isEmpty()) {
            System.out.println("‚ö† Nenhum funcion√°rio cadastrado para calcular a m√©dia salarial.");
            return;
        }

        // Soma os sal√°rios
        double soma = lista.stream().mapToDouble(Funcionario::getSalario).sum();
        double media = soma / lista.size();

        System.out.printf("üí∞ M√©dia salarial dos %d funcion√°rios: R$ %.2f%n", lista.size(), media);
    }

}
